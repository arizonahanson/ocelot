{
package parser

import "github.com/starlight/ocelot/pkg/core"
}

// root of AST
Module ←  expr:Expr EOF {
  return core.List(expr.([]core.Any)), nil
}

// expression sequence without delimiters
Expr ←  _* first:Any? rest:(_+ Any)* _* {
  return join(first, rest, 1), nil
}

// parent `any` type
Any ←   Atom / Symbol / List

// types that don't eval to another type (contents may)
Atom ←  Number / String / Vector / Map

// list expression (non-atom first)
List ←  '(' expr:Expr ')' {
  return core.List(expr.([]core.Any)), nil
} / '(' Expr !')' {
  return core.Null{}, errors.New("not terminated")
}

// vector
Vector ←  '[' expr:Expr ']' {
  return core.Vector(expr.([]core.Any)), nil
} / '[' Expr !']' {
  return core.Null{}, errors.New("not terminated")
}

// map
Map ←  '{' _* first:(String _* ':' _* Any)? rest:(_+ String _* ':' _* Any)* _* '}' {
  return core.Map(merge(first, rest, 0, 4)), nil
} / '{' _* (String _* ':' _* Any) (_+ String _* ':' _* Any)* _* !'}' {
  return core.Null{}, errors.New("not terminated")
}

// literal real number like (-123.45e-67)
Number ←  '-'? digit+ ('.' digit+)? ('e'i '-'? digit+)? {
  return core.String{Val: string(c.text)}.Number()
}

// literal string
String ←  '"' runeChr* '"' {
  return core.String{Val: string(c.text)}.Unquote()
} / '"' runeChr* !'"' {
	return core.Null{}, errors.New("not terminated")
}
// no bare " or \ inside a String, supports \\, \", \abfnrtv, \xff, \uffff, \Uffffffff
runeChr ←  [^"\\] / runeEsc
runeEsc ←  `\` ([abfnrtv"\\] /
           ('x' hexDigit hexDigit) /
           ('u' hexDigit hexDigit hexDigit hexDigit) /
           ('U' hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit hexDigit))
hexDigit ← [0-9a-f]i

// identifiers (like num.ϕa_2)
Symbol ←  word ('.' word)* suffix? {
  str := string(c.text)
  if str == "null" {
    return core.Null{}, nil
  }
  if str == "true" {
    return core.Bool(true), nil
  }
  if str == "false" {
    return core.Bool(false), nil
  }
  return core.NewSymbol(str, pos(c.pos)), nil
}

word ←  letter (letter / digit)*
// suffix
suffix ←  [!?*]
// integer part of Number
digit ←  [0-9]
// unicode letters, and underscore, in indentifiers
letter ←  [\p{L}] / '_'

// UTF-8: whitespace and control chars/unused codes
_ "whitespace" ←  [\p{Z}] / [\p{C}] / ',' / Comment

// comments
Comment ←  SingleLineComment / MultiLineComment
SingleLineComment ← "//" (!EOL .)* EOL
MultiLineComment ←  "/*" (!"*/" .)* "*/"

// end of line
EOL ←  '\n' / EOF

// End of file
EOF ←  !.
